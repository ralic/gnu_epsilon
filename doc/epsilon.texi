\input color % This kludge works.  This is -*- texinfo -*-... -*- coding: utf-8 -*-
\input texinfo.tex

@c Old first line:

@c This file is part of the GNU epsilon manual.
@c Copyright (C) 2005, 2013, 2015, 2016  Luca Saiu
@c Copyright (C) 2012  Université Paris 13
@c Written by Luca Saiu

@c Permission is granted to copy, distribute and/or modify this document
@c under the terms of the GNU Free Documentation License, Version 1.3
@c or any later version published by the Free Software Foundation;
@c with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
@c Texts.  A copy of the license is included in the section entitled ``GNU
@c Free Documentation License''.

@c Written by Luca Saiu

@c @@@@@ Header
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@c %**start of header
@setfilename epsilon.info
@include version.texi
@settitle epsilon @value{EDITION}

@dircategory Programming Languages
@direntry
* epsilon: (epsilon). A programming language
@end direntry

@c %**end of header

@c To do: when the current solution looks bad in Info, change @emph to
@c @i and @strong to @b, and @code to @t.

@c Before release run C-u C-c C-u C-a to fix the structure of nodes
@c To do: replace @emph with @dfn where appropriate

@setchapternewpage odd

@documentencoding UTF-8

@c ------------------------------------------------------------------------
@c %**end of header
@c ------------------------------------------------------------------------

@node Top
@copying
This is the manual documenting epsilon (version @value{VERSION},
last updated on @value{UPDATED}).

@c @c @mylambda{} @myepsilon{} @mytau{17} @mybottom @myarrow @mytailedarrow{}
@c @c @mytimes @myrho 
@c @c @myomega
@c @c @w{@mylambda{} @math{x .}@mylambda{} @math{y . x + y}}

epsilon is an extensible programming language.
[FIXME: say something more]

Copyright @copyright{} 2005, 2013, 2015 Luca Saiu

Copyright @copyright{} 2012 Universit@'e Paris 13

Written by Luca Saiu

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'', with no
Front-Cover texts and with the Back-Cover text being ``@emph{You have
freedom to copy and modify this manual, like GNU software.}''.

A copy of the license is included in the section entitled ``GNU Free
Documentation License''. 
@end quotation
@end copying


@c @@@@@ Macros
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@ifhtml
@rmacro mycolor{texr, texg, texb, htmlcolor, text}
@inlineraw{html,<span style="color:\htmlcolor\;">}\text\@inlineraw{html,</span>}
@end rmacro
@end ifhtml
@ifnothtml
@iftex
@c This is *really* horrible, but colors nest correctly: try @red{aa@green{bb}aa}
@c @inlineraw{tex,@definecolor{thiscolor}{rgb}{\texr\,\texg\,\texb\}@textcolor{thiscolor}{\text\}}
@c ???????
@c @inlineraw{tex,@definecolor{thiscolor}{rgb}{\texr\,\texg\,\texb\}@textcolor{thiscolor}{\text\}}
@rmacro mycolor{texr, texg, texb, htmlcolor, text}
@inlineraw{tex,@definecolor{thiscolor}{rgb}{\texr\,\texg\,\texb\}@textcolor{thiscolor}{\text\}}
@end rmacro
@end iftex
@ifnottex
@rmacro mycolor{texr, texg, texb, htmlcolor, text}
\text\
@end rmacro
@end ifnottex
@end ifnothtml

@c @mycolor{0.6,0,0,#cc0000,\text\}
@c \text\
@rmacro red{text}
@mycolor{0.6, 0,   0,   #cc0000, @withcommas{\text\}}
@end rmacro
@rmacro green{text}
@mycolor{0,   0.6, 0,   #00cc00, @withcommas{\text\}}
@end rmacro
@rmacro yellow{text}
@mycolor{0.6, 0.6, 0,   #cccc00, @withcommas{\text\}}
@end rmacro
@rmacro purple{text}
@mycolor{0.6, 0,   0.6, #cc00cc, @withcommas{\text\}}
@end rmacro

@iftex
@macro epsilonsubscript{subscript}
@inlineraw{tex,$@varepsilon_{\subscript\}$}@inlineraw{tex,{}}
@end macro
@end iftex

@ifnottex
@ifhtml
@macro epsilonsubscript{subscript}
@inlineraw{html,&epsilon;<sub>\subscript\</sub>}
@end macro
@end ifhtml
@ifnothtml
@macro epsilonsubscript{subscript}
epsilon\subscript\
@end macro
@end ifnothtml
@end ifnottex

@macro epsilonzero{}
@epsilonsubscript{0}
@end macro

@macro epsilonone{}
@epsilonsubscript{1}
@end macro

@ifhtml
@unmacro print
@c ``⊣'' looks much nicer than the default ``-|'':
@macro print
⊣
@end macro
@end ifhtml

@c This is useful to pass arguments containing commas to macros:
@rmacro withcommas{text}
\text\
@end rmacro

@c [@strong{\notice\}: @emph{\text\}]
@rmacro metanotice{notice, text}
@red{[@strong{\notice\}: @emph{\text\}]}
@end rmacro

@rmacro fixme{text}
@metanotice{To do, @withcommas{\text\}}
@end rmacro

@rmacro maybe{text}
@metanotice{Maybe, @withcommas{\text\}}
@end rmacro

@macro fill{}
@todo{fill this}
@end macro

@rmacro move{text}
@metanotice{Move this, @withcommas{\text\}}
@end rmacro

@c DEPRECATED
@alias todo=fixme

@c -----------------------------------------

@iftex
@macro qepsilon{}
@inlineraw{tex,$@varepsilon$}
@end macro
@end iftex
@ifnottex
@ifhtml
@macro qepsilon{}
@inlineraw{html,&epsilon;}
@end macro
@end ifhtml
@ifnothtml
@macro qepsilon{}
epsilon
@end macro
@end ifnothtml
@end ifnottex

@iftex
@macro qlambda{}
@inlineraw{tex,$@lambda$}
@end macro
@end iftex
@ifnottex
@ifhtml
@macro qlambda{}
@inlineraw{html,&lambda;}
@end macro
@end ifhtml
@ifnothtml
@macro qlambda{}
lambda
@end macro
@end ifnothtml
@end ifnottex

@iftex
@macro qpi{}
@inlineraw{tex,$@pi$}
@end macro
@end iftex
@ifnottex
@ifhtml
@macro qpi{}
@inlineraw{html,&pi;}
@end macro
@end ifhtml
@ifnothtml
@macro qpi{}
pi
@end macro
@end ifnothtml
@end ifnottex


@macro colorForth{}
@red{color}@green{Forth}
@end macro

@alias colorforth = colorForth

@alias somewhere = move


@c @c The string starting with "_POSTTITLE", both delimiters included, is
@c @c automatically replaced by the title filter.
@c @c @emph{_POSTTITLE\id\_} (@url{BLOGURLROOTHTMLROOTBLOGDIRECTORY/posts/\id\})
@c @c ``_POSTTITLE\id\_'' (@url{BLOGURLROOTHTMLROOTBLOGDIRECTORY/posts/\id\})
@c @macro linkpostquote{id}
@c ``_POSTTITLE\id\_'' (@url{BLOGURLROOTHTMLROOTBLOGDIRECTORY/posts/\id\})
@c @end macro
@c @macro linkpostemph{id}
@c @emph{_POSTTITLE\id\_} (@url{BLOGURLROOTHTMLROOTBLOGDIRECTORY/posts/\id\})
@c @end macro

@c @c We don't need intentation in examples, when formatting to HTML.  We
@c @c obtain the same graphical effect with CSS, and the code is easier
@c @c to cut/paste this way:
@c @html
@c @exampleindent 0
@c @end html

@c -----------------------------------------

@c @@@@@ Title page
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@titlepage
@title GNU epsilon
@subtitle an extensible programming language
@subtitle For version @value{VERSION}, @value{UPDATED}
@author Luca Saiu
@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@ifnottex
@top epsilon
@insertcopying
@end ifnottex

@c @@@@@ Contents
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@c @c So the toc is printed in the right place.
@c @contents

@c If not generating TeX output, make this one the Top node and insert
@c brief copying conditions:
@c @ifnottex
@c @node top
@c @top epsilon
@c @insertcopying
@c @end ifnottex
@c @iftex
@c @node top
@c @top epsilon
@c @end iftex

@c @node top
@c @top epsilon


@c @node Top
@c @@@@@ Body
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@c Main menu
@menu
* This manual is incomplete::  Please come back later --- unless you're curious.
* A declaration of intent::    Why we need this new programming language.
* Tutorial::                   An introduction to epsilon starting from scratch.
@c * Introduction::               What epsilon is
@c * Library::                    sdf..sad.sa.d.saed
@c * Something::                  sdf..sad.sa.d.saed
* Compilers::                  How to use and modify epsilon compilers.
@c * Appendices::                 Some stuff not fitting in the body
@c * GNU General Public License:: The GNU General Public License says
@c                                how you can copy and share epsilon
@c * GNU Free Documentation License:: The GNU Free Documentation License
@c * Index::                      Concept index
@end menu

@node This manual is incomplete
@chapter This manual is incomplete

This manual is @emph{very} incomplete, actually just a stub.  The
project needs actual documentation, and I plan to write it --- but not
before the implementation itself is in a more stable state.

At the present time I'm using this document mostly to try out ideas,
for myself.  You're welcome to look if you're curious, but this is not
really ready for users.

As the document gradually converges to a stable state, the
presentation style will get richer and I'll write English in a more
careful way.  I'm actually a perfectionist.  But I can't waste time on
my literary ambitions when I'm writing braindumps.


@section Where to look

Ironically, I've already written at length about epsilon.

I've described its formal syntax and semantics, along with its
philosophy and rationale, in my PhD thesis.  It's available at
@url{http://ageinghacker.net/publications#phd-thesis}, and you're very
welcome to read it.  Anyway, even if it also describes some source
code, a thesis is not software documentation.  The mathematical
treatment is not very accessible, and the user interface as described
has already changed in a substantial way.

Essentially my thesis provides a formal treatment of epsilon, also
deriving some properties from its semantics, by formal proofs.  Such a
formal system is inherently fragile, and can't be kept correct unless
the language is frozen.  I don't plan any radical change
in @epsilonzero at the current time, but I might see some change to
make in the future.  This is definitely a @emph{The Right Thing} kind
of project, and if it turns out that I have to temporarily destroy
much of it in order to build a better thing, I'm perfectly willing.
The thesis will stay as it is: it covers my language philosophy and
describes very precisely a particular state in the language history.
At the present time that state is mostly a strict subset of the
current state, which makes the description still relevant.  In the
future, this may change and the software may drift away into a
different direction.

I plan to use my blog to post updates about epsilon; again, mostly
thinking of myself as the public.  Blog posts will show ideas in a
less stable state than this document, and will also deal with failed
attempts.  The blog address is @url{http://ageinghacker.net/blog}

Of course you're welcome to write to the project mailing list (see
@url{http://lists.gnu.org/mailman/listinfo/epsilon-devel}), or to
me personally if you have questions.

You can also report bugs to @email{bug-epsilon@@gnu.org}, currently an
@code{epsilon-devel} alias.

Thanks.
@flushright
--- Luca Saiu
@end flushright

@c ==============================================================
@node A declaration of intent
@chapter A declaration of intent

@todo{``Current software is shameful''.  Cite Chuck Moore.}

@todo{Development along different axes: expressivity first.  Safety as
well, under the control of the developer.  Compatibility not
paramount.}

@todo{Briefly introduce reductionism in design, before articulating
the idea in a new chapter}

@fill

@c ==============================================================
@part Part I @* Tutorial

@iftex
@include epsilon-tutorial-tex.texi
@end iftex
@ifnottex
@include epsilon-tutorial-nottex.texi
@end ifnottex

@c ==============================================================
@part Part II @* Internals and foreign API

@c ==============================================================
@node Compilers
@chapter Compilers

Thanks to its architecture, compilers for epsilon are simply sets of
ordinary procedures, technically part of its library.  There is no
magic external program called a compiler: compilation is simply a
functionality available to programs, which can decide at some point to
dump their state into a native executable file during their execution.

As a consequence of epsilon's architecture, its compilers are
whole-program.

At the present time I'm working on the @emph{trivial compiler}.  A more
ambitious compiler, likely using GCC as the middle-end, will come
later.

@c @section Trivial compiler
The trivial compiler is conceived to be very simple and easy to
retarget, while still generating code good enough to beat an interpreter
in performance.

As a slogan or design goal for the trivial compiler we could say
@emph{100,000 times smaller than GCC, only 10 times slower code}.  The
efficiency goal has not been attained yet.

A frontend translates @epsilonzero, to an intermediate stack-based
language.  Several different backends exist to translate the
intermediate code to either machine code, or to code for our custom
SVM virtual machine.

@section Frontend
@fixme{It works and it doesn't really need much maintaining, but is
currently the ugliest part of the compiler.  I'd like to rewrite
that.}

@section Intermediate language
The intermediate language has a very uniform behavior: temporaries,
parameters and results are all passed through the thread-local
@emph{epsilon stack}.  Each procedure activation has a stack frame
containing slots for input and output, for local variables, and
scratch space.  The exact stack layout is specific to each backend.

Primitives may be implemented in portable C or in assembly.  In either
case, they operate on the stack, popping parameters off the top of the
stack, and pushing back results.  It is reasonable that a new backend
starts with all primitives implemented in C, with the user replacing
the most used ones with assembly implementations, for better performance.

At all moments the stack height relative to the currently procedure
frame is known at compilation time, which enables backends to
translate stack accesses into memory read and writes using a frame
pointer plus constant offsets, with no need for a stack pointer at run
time.

Such frame-pointer-relative operations are more efficient than the
naïve alternative, but all the reading, writing and copying of
intermediate data through memory (rather than registers) is the main
reason the trivial compiler generates inefficient code.

@fixme{Some} backends may use a second stack per thread to hold return
addresses and some temporaries which are only needed at procedure call
time; since everything on the main stack gets to be data, having such
a @emph{return stack} simplifies the garbage collection interface.  As
a secondary advantage, the return stack may be used for keeping some
temporaries which are only needed at call time, which saves some
shuffling on indirect calls.

The intermediate code distinguishes tail and non-tail calls.

@fixme{add an example}

@c @subsection Backend-dependant runtime

@section Backends

@subsection The Slow Virtual Machine
@fixme{The SVM exists, but it was conceived for a previous iteration
of the architecture.  I have to adapt it a little, which will result in
simpler code, and likely in better performance as well.}
@fixme{Do I need a bytecode interpreter?  I experimented with Forth-style
threaded code, which seems to work well.  I might drop the SVM altogether.}

@subsection C backend
This was actually the first backend I wrote.  It works, but I don't
think it will scale to large programs (even if people tell me that
recent GCCs are very good at compiling huge C source files made of
small functions, which is my case).  More importantly, the problem of
sibling-call compilation is entirely delegated to GCC.

The C backend implicitly uses the C stack for return addresses.

@fixme{I might replace this with the SVM}

@subsection MIPS backend
The MIPS backend works well.  It currently generates 32-bit code only.

@c @subsubsection MIPS register map
We use registers which are callee-save according to C ABIs:
@code{$16}-@code{$23}.  They are plenty, for the needs of the trivial
compiler.

I don't reserve for our internal purposes the registers used for
passing parameters (@code{$4}-@code{$7} on the o32 ABI,
@code{$4}-@code{$11} on n32 and n64) or returning results
(@code{$2}-@code{$3}) in C, nor C the stack pointer @code{$29} or the
global pointer @code{$28}.

The global pointer @code{$28} can be trashed by C functions under the
o32 ABI.  All the more recent ABIs have since fixed that, but o32 is
still widespread.  I currently restore @code{$28} after calling C
functions, without conditionalizing on the ABI.

The MIPS compiler saves return addresses on the epsilon stack,
currently for all procedures --- it wouldn't be needed for leaf
procedures not calling primitives.

@table @w{}
@item @code{$2}-@code{$3}
scratch
@item @code{$16}
epsilon stack pointer
@item @code{$21}
a valid copy of the global pointer, to restore @code{$28}
@item @code{$22}
@code{epsilon_c_primitive_functions} base.
@item @code{$23}
pointer to the @code{struct thread_context} C structure for the current thread.
@item @code{$31}
return address (saved on the stack at procedure entry).
@end table
Easily available for future use:
@table @w{}
@item @code{$17}-@code{$20}
available for future use
@item @code{$12}-@code{$15}
(caller-save) available as scratch for future use
@item @code{$24}-@code{$25}
(caller-save) available as scratch for future use
@end table

@subsection x86_64 backend
The x86_64 backend works well.

There are two completely different calling conventions.  If I wanted
to support the microsoft convention as well I'd have to conditionalize
a little.

@table @emph
@item GNU (actually System V, also used by the other Unix systems)
parameters @code{%rdi}, @code{%rsi}, @code{%rdx}, @code{%rcx}, @code{%r8}, and @code{%r9} --- results @code{%rax}, @code{%rdx}
@item microsoft
parameters @code{%rcx}, @code{%rdx}, @code{%r8}, @code{%r9} --- result @code{%rax}
@end table
I'll completely ignore the microsoft convention for the time being.  I
might accept patches by others to support it in the future, but not
now for this trivial compiler.

Again, I'm only reserving callee-save registers.
In the SysV ABI callee-save registers are
@code{%rbx}, @code{%r12}, @code{%r13}, @code{%r14}, @code{%r15}.
@code{%rsp} is also technically callee-save, but I don't want to use it.  The same holds for @code{%rbp}; that should be less critical, but I still won't use it.

Here's the current register map for the SysV ABI:
@table @w{}
@item @code{%rax},@code{%r11}
scratch
@item @code{%rbx}
epsilon frame pointer
@item @code{%r12}
@code{epsilon_c_primitive_functions} base.
@item @code{%r13}
pointer to the @code{struct thread_context} C structure for the current thread.
@end table

Easily available for future use:
@table @w{}
@item @code{%r14}-@code{%r15}
available for future use
@end table

I use the C stack for return addresses, and for return addresses only.
This comes for free when using @code{callq}, which pushes a return
address to @code{%rsp}.

@subsection MOS Technology 6502 backend (Commodore 64)
The backend currently targets the Commodore 64 computer, but it should
be easy to adapt to other machines using the 6502 CPU.  This is the
only 16-bit backend, and the only one targeting ``the metal''; however
some KERNAL (sic) ROM routines are used.

The machine is way too small to host an epsilon interactive REPL or
native compilation, but cross-compiling to the Commodore 64 from
another platform works fine.  Compilation relies on the ACME
cross-assembler, building @code{PRG} program images.

The compiler generates a one-line BASIC starter, consisting of a
@code{SYS} call to the machine-language program.  I don't bother
correctly setting the pointers to delimit BASIC RAM.  The compiler is
intended to generate fully machine-language programs, and doesn't
support interacting with BASIC.

Only a subset of the primitives is supported.  The CPU is 8-bit and
particularly weak, not supporting multiplication, division, or even
a barrel shifter.  Some fixnum primitives are replaced with
@emph{epsilon procedures}; this in particular makes multiplication,
division and remainder excruciatingly slow.  I might rewrite some of
them in assembly.

Supported primitives are
@code{fixnum:+}, @code{fixnum:-}, @code{fixnum:*},
@code{fixnum:bitwise-and}, @code{fixnum:bitwise-or}, @code{fixnum:bitwise-xor},
@code{whatever:zero?}, @code{fixnum:1+}, @code{fixnum:1-},
@code{fixnum:bitwise-not},
@code{fixnum:left-shift-1-bit},
@code{fixnum:arithmetic-right-shift-1-bit}, @code{fixnum:logic-right-shift-1-bit},
@code{whatever:eq?}, @code{fixnum:<}, @code{fixnum:<=}, @code{fixnum:negate},
@code{buffer:make}, @code{buffer:get}, @code{buffer:set!},  @code{buffer:initialize!},
@code{io:standard-output}, @code{io:write-character}.

``Heap'' allocation is supported, but there is currently no way to
release heap memory, nor a garbage collector.  Disk files are not
supported.  Character output transparently converts from ASCII to
PETSCII.

The following primitives are backend-specific, and useful for
memory-mapped I/O:
@code{io:load-byte}, @code{io:store-byte!},
@code{c64:read-timer}.

The following procedures are supported but are @emph{not} primitives
wrappers in the 6502 backend: @code{fixnum:*}, @code{fixnum:/},
@code{fixnum:%}, @code{fixnum:%/}, @code{fixnum:left-shift},
@code{fixnum:arithmetic-right-shift}, @code{fixnum:logic-right-shift}.

The 6502 is an @emph{accumulator} CPU.  Its only registers are the
@code{A} accumulator, the two index registers @code{X} and @code{Y},
plus a set of seven 1-bit flags.  It's not practical to reserve any
register.  A compiler more elaborate than the current one would
reserve zeropage 16-bit elements as ``registers''.  Using 8-bit
instead of 16-bit operations where possible would considerably
improve efficiency.

The hardware return stack at page @code{$01} would only suffice for
128-deep calls, and is therefore not used.  The trivial compiler uses
its own stack for return addresses, parameters, results and
temporaries.  All operands are 16-bits.  Stack accesses are painful on
the 6502, which is unsuited to pointers.  Accessing a 16-bit word from
the stack needs two memory accesses in @emph{zeropage indirect
indexed} addressing mode, using the @code{Y} register to compute an
8-bit offset from a 16-bit base pointer held in page @code{$00}.
All computation is in binary mode; BCD mode is not used.

The 6502 backend, differently from the others, makes heavy use
of assembler macros in order to define operations which are predefined
on other architectures.  The runtime library is completely written in
assembly.  See @file{runtime/backend-specific/c64/runtime.a}.

Reserved page @code{$00} globals (all of them are 16 bits):

@table @w{}
@item @code{00c1}
frame pointer (updated at procedure entry/exit)
@item @code{0002},@code{00fb},@code{00fd}
scratch
@end table

The ``heap'' allocation pointer is currently not in page @code{$00}, and its
address is not constant.

@subsection Future backends
@fixme{I plan to write a backend for ARM, PowerPC, and x86 as well.  I
don't have access to hardware implementations of other architectures at
the present time, but I know where to ask when the time comes.}

@c @c ==============================================================
@c @node Appendices
@c @c @unnumbered Appendices
@c @c Blah.  sdajfsdjkfh sjkd fhjksdfjk sdfjksdjkf jksdf jksd fjksd f.
@c @c Blah.  sdajfsdjkfh sjkd fhjksdfjk sdfjksdjkf jksdf jksd fjksd f.
@c @c Blah.  sdajfsdjkfh sjkd fhjksdfjk sdfjksdjkf jksdf jksd fjksd f.
@c @c Blah.  sdajfsdjkfh sjkd fhjksdfjk sdfjksdjkf jksdf jksd fjksd f.
@c @c Blah.  sdajfsdjkfh sjkd fhjksdfjk sdfjksdjkf jksdf jksd fjksd f.
@c @c Blah.  sdajfsdjkfh sjkd fhjksdfjk sdfjksdjkf jksdf jksd fjksd f.
@c @c Blah.  sdajfsdjkfh sjkd fhjksdfjk sdfjksdjkf jksdf jksd fjksd f.
@c @c Blah.  sdajfsdjkfh sjkd fhjksdfjk sdfjksdjkf jksdf jksd fjksd f.

@c @menu
@c * GNU General Public License::      License for the software
@c * GNU Free Documentation License::  License for this manual.
@c @end menu

@c @node GNU General Public License
@c @appendix GNU General Public License
@c @cindex GNU General Public License
@c @include gpl.texi

@c @node GNU Free Documentation License
@c @appendix GNU Free Documentation License
@c @include fdl.texi

@c @node Index
@c @unnumbered Index
@c @printindex cp

@c @example
@c aa@red{bb}aa
@c @end example

@bye
