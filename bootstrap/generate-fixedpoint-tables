#!/bin/bash
## This is a -*- Bash -*- script to generate fixed-point tables using bc.

## Copyright (C) 2015  Luca Saiu
## Written by Luca Saiu

## This file is part of GNU epsilon.

## GNU epsilon is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## GNU epsilon is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with GNU epsilon.  If not, see <http://www.gnu.org/licenses/>.


set -e


## These values are more than enough for all existing architectures.
scale=100
maximum_positive_exp_exponent=12
maximum_negative_exp_exponent=63
# maximum_positive_log_exponent=63
maximum_negative_log_exponent=63


function suppress_backslashes
{
    tr '\n' 'Q' | sed 's/\\Q//g'
}

function print_number
{
    bc_expression="$1"
    comment="$2"
    result=$(echo "scale = $scale; print $bc_expression" | bc -l | suppress_backslashes)
    echo "  (reader:string-in-simple-dot-notation->fixed-point \"$result\") ;; $comment"
}

function print_exp_of_power_of_2 ()
{
    i="$1"
    print_number "e (2 ^ $i)" "exp (2 ^ $i)"
}

function print_log_of_1_plus_power_of_2 ()
{
    i="$1"
    print_number "l (1 + 2 ^ $i)" "log (1 + 2 ^ $i)"
}

echo ';; This file is automatically generated.'
echo

# echo "(e1:define fixedpoint-tables:maximum-positive-exponential-exponent $maximum_positive_exp_exponent)"
# echo '(e1:define fixedpoint-tables:exponential-table (tuple:make'
# for i in $(seq 0 $maximum_positive_exp_exponent); do
#     print_exp_of_power_of_2 $i
# done
# echo '))'
# echo

# echo "(e1:define fixedpoint-tables:maximum-negative-exponential-exponent $maximum_negative_exp_exponent)"
# echo '(e1:define fixedpoint-tables:negative-exponential-table (tuple:make'
# for i in $(seq 0 $maximum_negative_exp_exponent); do
#     print_exp_of_power_of_2 -$i
# done
# echo '))'
# echo

# echo "(e1:define fixedpoint-tables:maximum-positive-logarithm-exponent $maximum_positive_log_exponent)"
# echo '(e1:define fixedpoint-tables:logarithm-table (tuple:make'
# for i in $(seq 0 $maximum_positive_log_exponent); do
#     print_log_of_1_plus_power_of_2 $i
# done
# echo '))'
# echo

echo "(e1:define fixedpoint-tables:maximum-negative-logarithm-exponent $maximum_negative_log_exponent)"
echo '(e1:define fixedpoint-tables:logarithm-table (tuple:make'
for i in $(seq 0 $maximum_negative_log_exponent); do
    print_log_of_1_plus_power_of_2 -$i
done
echo '))'
echo

echo "(e1:define fixedpoint-tables:pi"
print_number "4 * a (1)" "pi"
echo ')'
echo

echo "(e1:define fixedpoint-tables:e"
print_number "e (1)" "e"
echo ')'
echo
