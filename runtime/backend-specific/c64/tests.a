;;; epsilon runtime library for the Commodore 64 port, in ACME -*- asm -*-.
;;;
;;; Copyright (C) 2014 Luca Saiu
;;; Written by Luca Saiu

;;; This file is part of GNU epsilon.

;;; GNU epsilon is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation, either version 3 of the License, or
;;; (at your option) any later version.

;;; GNU epsilon is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.

;;; You should have received a copy of the GNU General Public License
;;; along with GNU epsilon.  If not, see <http://www.gnu.org/licenses/>.


;;; This file contains currently unused assembly code which might still
;;; come in handy in the future, particularly for testing.

border = 53280
background = 53281

border_previous_color:
!byte 0

save_border:
        lda border
        sta border_previous_color
        rts
restore_border:
        lda border_previous_color
        sta border
        rts

;;; Parameter in A.
set_border:
        sta border
        rts


!macro print_stack .slot {
        +stack_to_a_and_x_16bit .slot
        jsr print_decimal_16bit
}

;;; Operand in A, quotient in X, remainder in A.
divide_by_10_8bit:
        ldx #0
divide_by_10_8bit_loop:
        cmp #10
        bcc divide_by_10_8bit_out:
        sec
        sbc #10
        inx
        jmp divide_by_10_8bit_loop
divide_by_10_8bit_out:
        rts

;;; Operand in [0, 10) in A.
;;; Clobbers X, Y.
print_decimal_digit:
        ora #$30 ;; Set high bits.
        jsr chrout
        rts

;;; Operand in A.  Clobbers X and Y.
print_decimal_8bit:
        ldy #0 ;; Hold the digit stack height in y.
        cmp #0
        bne print_decimal_8bit_fill_stack_loop
        ;; Special case: the number to print is zero.
        jmp print_decimal_digit ;; Tail call.
print_decimal_8bit_fill_stack_loop:
        cmp #1
        bcc print_decimal_8bit_print
        jsr divide_by_10_8bit
        pha ;; Push remainder digit.
        iny ;; Increment digit counter.
        txa ;; Continue to examine the quotient.
        jmp print_decimal_8bit_fill_stack_loop
print_decimal_8bit_print:
        sty print_decimal_8bit_digit_no
print_decimal_8bit_print_loop:
        lda print_decimal_8bit_digit_no
        cmp #0
        beq print_decimal_8bit_out
        dec print_decimal_8bit_digit_no
        pla
        jsr print_decimal_digit
        jmp print_decimal_8bit_print_loop
print_decimal_8bit_out:
        rts
print_decimal_8bit_digit_no:
        !byte 0

;;; Temporary version, printing MSB then LSB, both in decimal.
;;; Operand in A(LSB) and X(MSB).  Clobbers Y.
print_decimal_16bit:
        pha
        txa
        jsr print_decimal_8bit
        ;; jsr print_newline
        lda #character_plus
        jsr chrout
        ;; jsr print_newline
        pla
        jsr print_decimal_8bit
        jsr print_newline
        rts

;;; FIXME: move.  However this is a good "visual" benchmark.
assembly_stripes:
        sec
outer:
        lda #15
inner:
        sta 53280
        sta 53281
        beq outer
        sbc #1
        jmp inner

;;; A manually unrolled version of assembly_stripes_.
assembly_stripes_unrolled:
        lda #15
        sta 53280
        sta 53281
        lda #14
        sta 53280
        sta 53281
        lda #13
        sta 53280
        sta 53281
        lda #12
        sta 53280
        sta 53281
        lda #11
        sta 53280
        sta 53281
        lda #10
        sta 53280
        sta 53281
        lda #9
        sta 53280
        sta 53281
        lda #8
        sta 53280
        sta 53281
        lda #7
        sta 53280
        sta 53281
        lda #6
        sta 53280
        sta 53281
        lda #5
        sta 53280
        sta 53281
        lda #4
        sta 53280
        sta 53281
        lda #3
        sta 53280
        sta 53281
        lda #2
        sta 53280
        sta 53281
        lda #1
        sta 53280
        sta 53281
        lda #0
        sta 53280
        sta 53281
        jmp assembly_stripes
